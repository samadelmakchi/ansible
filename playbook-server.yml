# کانفیگ و نصب ابزارهای سرور
- name: Configuring and installing server tools
  hosts: localhost
  become: true

  tasks:
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ راه اندازی و ست کردن شکن
    - name: Set DNS for Shecan and configure systemd-resolved
      ansible.builtin.lineinfile:
        path: /etc/systemd/resolved.conf
        regexp: '^DNS='
        line: 'DNS=185.51.200.2 185.51.200.3'
        state: present
      poll: 1

    - name: Add FallbackDNS to /etc/systemd/resolved.conf
      ansible.builtin.lineinfile:
        path: /etc/systemd/resolved.conf
        regexp: '^FallbackDNS='
        line: 'FallbackDNS=8.8.8.8 1.1.1.1'
        state: present
      poll: 1

    - name: Restart systemd-resolved service
      ansible.builtin.systemd:
        name: systemd-resolved
        state: restarted
      poll: 1

    - name: Create symlink for /etc/resolv.conf to /run/systemd/resolve/resolv.conf
      ansible.builtin.file:
        src: /run/systemd/resolve/resolv.conf
        dest: /etc/resolv.conf
        state: link
      poll: 1

    - name: Test DNS with dig
      ansible.builtin.command:
        cmd: dig shecan.ir
      register: dig_result
      changed_when: false
      poll: 1

    - name: Print DNS test result
      ansible.builtin.debug:
        msg: "DNS test result: {{ dig_result.stdout }}"
      poll: 1

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ آپدیت سرور و نصب ابزارهای اولیه
    - name: Ensure python3-apt is installed (needed for apt module)
      ansible.builtin.apt:
        name: python3-apt
        state: present
        update_cache: true
      poll: 1

    - name: Update server and install essential tools
      ansible.builtin.apt:
        update_cache: true
        name:
          - cron
          - git
          - gzip
          - tar
          - curl
          - python3-pip
          - mysql-client
          - postgresql-client
        state: present
      poll: 1

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ نصب داکر
    # شناسایی نسخه اوبونتو و معماری
    - name: Check Ubuntu version and architecture
      ansible.builtin.shell: |
        CODENAME=$(lsb_release -cs)
        VERSION=$(lsb_release -rs)
        ARCHITECTURE=$(dpkg --print-architecture)
        echo "$CODENAME $VERSION $ARCHITECTURE"
      register: system_info
      changed_when: false
      poll: 1

    # دانلود فایل‌های Docker
    - name: Download Docker .deb files if not already downloaded
      ansible.builtin.shell: |
        DOWNLOAD_DIR="tools/docker"
        mkdir -p "$DOWNLOAD_DIR"

        CODENAME="{{ system_info.stdout.split(' ')[0] }}"
        VERSION="{{ system_info.stdout.split(' ')[1] }}"
        ARCH="{{ system_info.stdout.split(' ')[2] }}"

        BASE_URL="https://download.docker.com/linux/ubuntu/dists/$CODENAME/pool/stable/$ARCH"
        FILES=(
          "containerd.io_1.7.27-1_${ARCH}.deb"
          "docker-ce_28.1.1-1~ubuntu.${VERSION}~${CODENAME}_${ARCH}.deb"
          "docker-ce-cli_28.1.1-1~ubuntu.${VERSION}~${CODENAME}_${ARCH}.deb"
          "docker-buildx-plugin_0.23.0-1~ubuntu.${VERSION}~${CODENAME}_${ARCH}.deb"
          "docker-compose-plugin_2.35.1-1~ubuntu.${VERSION}~${CODENAME}_${ARCH}.deb"
        )

        for FILE in "${FILES[@]}"; do
          if [ ! -f "$DOWNLOAD_DIR/$FILE" ]; then
            wget -O "$DOWNLOAD_DIR/$FILE" "$BASE_URL/$FILE"
          fi
        done
      args:
        executable: /bin/bash
      register: download_files
      changed_when: false
      poll: 1

    # نصب Docker از فایل‌های دانلود شده
    - name: Install Docker packages
      ansible.builtin.shell: |
        dpkg -i {{ playbook_dir }}/tools/docker/*.deb
      args:
        executable: /bin/bash
      changed_when: true
      poll: 1

    # رفع مشکلات احتمالی وابستگی‌ها
    - name: Fix dependencies
      ansible.builtin.apt:
        name: docker-ce
        state: present
        update_cache: true
      poll: 1

    # شروع و فعال‌سازی سرویس Docker
    - name: Start Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true
      poll: 1

    # بررسی نسخه‌های نصب‌شده Docker و Docker Compose
    - name: Check Docker version
      ansible.builtin.command:
        cmd: docker --version
      register: docker_version
      changed_when: false
      poll: 1

    # نمایش نسخه داکر
    - name: Show Docker version
      ansible.builtin.debug:
        msg: "Docker version: {{ docker_version.stdout }}"

    # چک کردن نسخه داکر کامپوز
    - name: Check Docker Compose version
      ansible.builtin.command:
        cmd: docker compose version
      register: docker_compose_version
      changed_when: false
      poll: 1

    # نمایش نسخه داکر کامپوز
    - name: Show Docker Compose version
      ansible.builtin.debug:
        msg: "Docker Compose version: {{ docker_compose_version.stdout }}"
      poll: 1

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ داکر پایتون
    # چک کنید آیا ماژول docker در پایتون نصب شده است
    - name: Check if Python docker module is installed
      ansible.builtin.shell: /usr/bin/python3 -c "import docker" >/dev/null 2>&1 && echo OK || echo FAIL
      register: docker_module_status
      changed_when: false
      poll: 1

    # اگر نصب نبود، پکیج docker را نصب کنید
    - name: Install Python docker module if not present
      ansible.builtin.pip:
        name: docker
        executable: /usr/bin/pip3
      when: docker_module_status.stdout != "OK"
      poll: 1

    # اگر docker-compose نصب نبود، آن را نصب کنید
    - name: Install docker-compose if not present
      ansible.builtin.pip:
        name: docker-compose
        executable: /usr/bin/pip3
      when: ansible_facts.packages['python3-docker-compose'] is not defined
      poll: 1

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ تغییر داکر ایمیج
    # ساخت پوشه /etc/docker
    - name: Creating the /etc/docker folder
      become: true
      ansible.builtin.file:
        path: /etc/docker
        state: directory
        mode: '0755'

    # تنظیم ArvanCloud Mirror در فایل daemon.json
    - name: Setting up ArvanCloud Mirror in the daemon.json file
      become: true
      ansible.builtin.copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "insecure-registries" : ["https://docker.arvancloud.ir"],
            "registry-mirrors": ["https://docker.arvancloud.ir"]
          }
        mode: '0644'

    # خروج از لاگین Docker
    - name: Log out of Docker login
      ansible.builtin.command:
        cmd: docker logout
      register: docker_logout
      changed_when: false

    # ریستارت سرویس Docker
    - name: Restart the Docker service
      become: true
      ansible.builtin.systemd:
        name: docker
        state: restarted

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Bind9
    # تولید فایل زون BIND9 بر اساس اطلاعات inventory
    - name: Ensure BIND9 config directory exists
      ansible.builtin.file:
        path: "tools/server/etc/bind"
        state: directory
        mode: '0755'

    - name: Generate BIND9 zone file from template
      ansible.builtin.template:
        src: template/zonefile.j2
        dest: "tools/server/etc/bind/db.{{ domain }}"
        owner: root
        group: root
        mode: '0644'
      vars:
        soa_email: "admin.{{ domain | replace('.', '\\.') }}"
        ttl: 3600
        ns_record: "ns1.{{ domain }}."
        origin: "{{ domain }}"

    - name: Copy BIND9 named.conf
      ansible.builtin.copy:
        src: templates/bind9/named.conf
        dest: "tools/server/etc/bind/named.conf"
        owner: root
        group: root
        mode: '0644'

    - name: Set up Bind9 using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools/server
        files:
          - bind9.yml
        state: present
        pull: always
        recreate: auto

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Traefik
    - name: Generate traefik.yml from template
      ansible.builtin.template:
        src: template/traefik.yml.j2
        dest: tools/server/traefik.yml
        owner: root
        group: root
        mode: '0644'

    # Traefik را با استفاده از Docker Compose راه اندازی کنید
    - name: Set up Traefik using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools/server
        files:
          - traefik.yml
        state: present
        pull: always  # به‌روزرسانی تصویرهای Docker همیشه
        recreate: auto  # بازسازی کانتینرها فقط در صورت نیاز
      environment:
        PATH: "/root/.docker/cli-plugins:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

    # شبکه Docker traefik_reverse_proxy ایجاد کنید
    - name: Create traefik_reverse_proxy Docker network
      community.docker.docker_network:
        name: traefik_reverse_proxy
        state: present

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Portainer
    # Portainer را با استفاده از Docker Compose راه اندازی کنید
    - name: Set up Portainer using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools/tools
        files:
          - portainer.yml
        state: present
        pull: always  # به‌روزرسانی تصویرهای Docker همیشه
        recreate: auto  # بازسازی کانتینرها فقط در صورت نیاز

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dozzle
    # Dozzle را با استفاده از Docker Compose راه اندازی کنید
    - name: Set up Dozzle using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools/tools
        files:
          - dozzle.yml
        state: present
        pull: always  # به‌روزرسانی تصویرهای Docker همیشه
        recreate: auto  # بازسازی کانتینرها فقط در صورت نیاز

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Uptime Kuma
    # Uptime Kuma را با استفاده از Docker Compose راه اندازی کنید
    - name: Set up Uptime Kuma using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools/tools
        files:
          - uptime_kuma.yml
        state: present
        pull: always  # به‌روزرسانی تصویرهای Docker همیشه
        recreate: auto  # بازسازی کانتینرها فقط در صورت نیاز

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SonarQube
    # SonarQube را با استفاده از Docker Compose راه اندازی کنید
    - name: Set up SonarQube using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools/cicd
        files:
          - sonarqube.yml
        state: present
        pull: always  # به‌روزرسانی تصویرهای Docker همیشه
        recreate: auto  # بازسازی کانتینرها فقط در صورت نیاز

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Nexus
    # Nexus را با استفاده از Docker Compose راه اندازی کنید
    - name: Set up Nexus using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools/cicd
        files:
          - nexus.yml
        state: present
        pull: always  # به‌روزرسانی تصویرهای Docker همیشه
        recreate: auto  # بازسازی کانتینرها فقط در صورت نیاز
