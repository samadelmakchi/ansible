# استقرار پروژه با Docker Compose، تنظیم دسترسی‌ها و اجرای درخواست‌ها
- name: Deploy project with Docker Compose, set permissions, and send requests
  hosts: all
  become: true

  vars:
    # مسیرهای پروژه
    project_path: "/opt/project"   # مسیر پروژه
    backup_path: "/opt/backup"     # مسیر بکاپ
    info_path: "/opt/info"         # مسیر اطلاعات
    log_path: "/opt/log"           # مسیر لاگ ها

    # اطلاعات SonarQube
    sonar_url: "http://your-sonarqube-server"  # URL سرور SonarQube
    sonar_token: "your_sonarqube_token"        # توکن SonarQube
    sonar_project_key: "simple-log-manager"    # کلید پروژه در SonarQube
    sonar_project_name: "Simple Log Manager"   # نام پروژه در SonarQube

    # متغیرهای مشتریان
    container_name: "{{ customer_containers[inventory_hostname] }}"                     # نام کانتینر برای هر مشتری
    network_name: "{{ customer_network_names[inventory_hostname] }}"                    # شبکه اختصاصی برای هر مشتری
    gateway_port: "{{ customer_gateway_ports[inventory_hostname] }}"                    # پورت بک‌اند اختصاصی برای هر مشتری
    portal_port: "{{ customer_portal_ports[inventory_hostname] }}"                      # پورت فرانت‌اند اختصاصی برای هر مشتری
    portal_frontend_port: "{{ customer_portal_frontend_ports[inventory_hostname] }}"    # پورت فرانت‌اند اختصاصی برای هر مشتری

    # اطلاعات دیتابیس مشتریان
    portal_database_type: "mysql"
    portal_mysql_root_password: "1234"
    portal_mysql_password: "1234"
    portal_mysql_user: "calibri_portal"
    portal_mysql_db_name: "calibri_portal"

    gateway_database_type: "mysql"
    gateway_mysql_root_password: "1234"
    gateway_mysql_password: "1234"
    gateway_mysql_user: "calibri_gateway"
    gateway_mysql_db_name: "calibri_gateway"

  tasks:
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ایجاد پوشه‌ها و فایل‌ها

    # SMD : چک کند اگر پوشه ها و فایل ها نباشد درست کند

    # ایجاد پوشه‌ها و فایل‌ها برای هر مشتری
    - name: Ensure main directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ project_path }}"
        - "{{ backup_path }}"
        - "{{ info_path }}"
        - "{{ log_path }}"

    # ایجاد پوشه مخصوص هر مشتری در مسیر پروژه‌ها
    - name: Ensure customer-specific directories exist in project_path
      ansible.builtin.file:
        path: "{{ project_path }}/{{ inventory_hostname }}"
        state: directory
        mode: '0755'
      when: customer_type in ["test", "VIP", "regular"]

    # ایجاد پوشه مخصوص مشتری در مسیر پشتیبان‌ها
    - name: Ensure customer directories in backup_path exist
      ansible.builtin.file:
        path: "{{ backup_path }}/{{ inventory_hostname }}"
        state: directory
        mode: '0755'
      when: customer_type in ["test", "VIP", "regular"]

    # ایجاد پوشه‌های test و backup در log_path
    - name: Ensure directories for test and backup in log_path exist
      ansible.builtin.file:
        path: "{{ log_path }}/{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "test"
        - "backup"

    # ایجاد پوشه‌های volumes و databases در info_path
    - name: Ensure directories for volumes and databases in info_path exist
      ansible.builtin.file:
        path: "{{ info_path }}/{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "volumes"
        - "databases"

    # برای هر مشتری یک فایل متنی در پوشه تست ایجاد کنید
    - name: Create a text file in test folder for each customer
      ansible.builtin.file:
        path: "{{ log_path }}/test/{{ inventory_hostname }}.txt"
        state: touch
        mode: '0644'
      when: customer_type in ["test", "VIP", "regular"]

    # برای هر مشتری یک فایل متنی در پوشه پشتیبان ایجاد کنید
    - name: Create a text file in backup folder for each customer
      ansible.builtin.file:
        path: "{{ log_path }}/backup/{{ inventory_hostname }}.txt"
        state: touch
        mode: '0644'
      when: customer_type in ["test", "VIP", "regular"]

    # برای هر مشتری یک فایل متنی در پوشه volumes ایجاد کنید
    - name: Create a text file in volumes folder for each customer
      ansible.builtin.file:
        path: "{{ info_path }}/volumes/{{ inventory_hostname }}.txt"
        state: touch
        mode: '0644'
      when: customer_type in ["test", "VIP", "regular"]

    # برای هر مشتری یک فایل متنی در پوشه پایگاه داده ایجاد کنید
    - name: Create a text file in databases folder for each customer
      ansible.builtin.file:
        path: "{{ info_path }}/databases/{{ inventory_hostname }}.txt"
        state: touch
        mode: '0644'
      when: customer_type in ["test", "VIP", "regular"]

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ لاگین به گیت لب

    # SMD : فقط یکبار لاگین کند و ناقص است

    # ایجاد دایرکتوری .ssh در سرور مقصد
    - name: Ensure .ssh directory exists
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/.ssh"
        state: directory
        mode: '0700'
      become: true

    # کپی کردن کلید خصوصی SSH به سرور
    - name: Copy SSH private key to the server
      ansible.builtin.copy:
        src: "~/.ssh/id_rsa"
        dest: "/home/{{ ansible_user }}/.ssh/id_rsa"
        mode: '0600'
      become: true

    # کپی کردن کلید عمومی SSH به سرور (اختیاری)
    - name: Copy SSH public key to the server
      ansible.builtin.copy:
        src: "~/.ssh/id_rsa.pub"
        dest: "/home/{{ ansible_user }}/.ssh/authorized_keys"
        mode: '0600'
      become: true

    # تست اتصال SSH به GitLab
    - name: Test SSH connection to GitLab
      ansible.builtin.command:
        cmd: "ssh -T git@gitlab.com"
      register: ssh_test_result
      ignore_errors: true
      changed_when: false

    # نمایش نتیجه تست SSH
    - name: Print SSH test result
      ansible.builtin.debug:
        msg: "{{ ssh_test_result.stdout }}"
      when: ssh_test_result is defined

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ کلون و چک‌اوت کردن تگ

    # SMD : برای کالیبری، پرتال و پرتال فرانت اند تگ و برنچ مستقل

    # تعریف پروژه‌ها و نام‌های پوشه‌ها
    - name: Clone repositories and checkout tags for each project
      ansible.builtin.set_fact:
        projects:
          - name: "calibri"
            repo: "git@gitlab.com:nasser-man/calibri.git"
            folder: "calibri"
          - name: "calibri-portal"
            repo: "git@gitlab.com:nasser-man/calibri-portal.git"
            folder: "calibri-portal"
          - name: "calibri-portal-frontend"
            repo: "git@gitlab.com:nasser-man/calibri-portal-frontend.git"
            folder: "calibri-portal-frontend"

    # کلون کردن پروژه از گیت برای هر مشتری
    - name: Clone repository from GitLab
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ project_path }}/{{ inventory_hostname }}/{{ item.folder }}"
        version: "{{ customer_git_branches[inventory_hostname] }}"
        update: true
        clone: true
      loop: "{{ projects }}"
      when: customer_type in ["test", "VIP", "regular"]

    # چک‌اوت کردن تگ خاص برای هر مشتری
    - name: Checkout the specific tag for each project
      ansible.builtin.shell: |
        cd "{{ project_path }}/{{ inventory_hostname }}/{{ item.folder }}"
        git checkout {{ customer_git_tags[inventory_hostname] }}
      loop: "{{ projects }}"
      when: customer_type in ["test", "VIP", "regular"]
      changed_when: false

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ کپی فایل ها

    # SMD : کپی فایل داکر کامپوز برای هر مشتری

    # ایجاد فایل bashUrl.js برای calibri-portal-frontend
    - name: Create file for calibri-portal-frontend project
      ansible.builtin.copy:
        dest: "{{ project_path }}/{{ inventory_hostname }}/calibri-portal-frontend/bashUrl.js"
        content: |
          const baseUrl = 'http://localhost:{{ customer_portal_ports[inventory_hostname] }}';
          export default baseUrl;
        mode: '0644'
      when: customer_type in ['test', 'VIP', 'regular']
      changed_when: false
      become: true

    # SMD : چک کند اگر فایل ها نباشند ایجاد بکند

    # ایجاد فایل .env.local برای calibri-portal
    - name: Set variables for .env.local content
      ansible.builtin.set_fact:
        database_url: |
          mysql://{{ portal_mysql_user }}:{{ portal_mysql_password }}@
          {{ container_name }}-portal-db/{{ portal_mysql_db_name }}?
          serverVersion=10.11.2-MariaDB&charset=utf8mb4
        base_url: "http://localhost:{{ customer_gateway_ports[inventory_hostname] }}"

    - name: Create file for calibri-portal project
      ansible.builtin.copy:
        dest: "{{ project_path }}/{{ inventory_hostname }}/calibri-portal-frontend/.env.local"
        content: |
          DATABASE_URL="{{ database_url }}"
          BASE_URL="{{ base_url }}"
        mode: '0644'
      when: customer_type in ['test', 'VIP', 'regular']
      changed_when: false
      become: true

    # ایجاد فایل my_database.php برای calibri
    - name: Create my_database.php for calibri
      ansible.builtin.copy:
        dest: "{{ project_path }}/{{ inventory_hostname }}/calibri/my_database.php"
        content: |
          <?php defined('BASEPATH') OR exit('No direct script access allowed');
          $active_group = 'default';
          $query_builder = TRUE;
          $db['default'] = array(
              'dsn'  => '',
              'hostname' => '{{ container_name }}-gateway-db',
              'username' => '{{ gateway_mysql_user }}',
              'password' => '{{ gateway_mysql_password }}',
              'database' => '{{ gateway_mysql_db_name }}',
              'dbdriver' => 'mysqli',
              'dbprefix' => '',
              'pconnect' => FALSE,
              'db_debug' => (ENVIRONMENT !== 'production'),
              'cache_on' => FALSE,
              'cachedir' => '',
              'char_set' => 'utf8',
              'dbcollat' => 'utf8_general_ci',
              'swap_pre' => '',
              'encrypt' => FALSE,
              'compress' => FALSE,
              'stricton' => FALSE,
              'failover' => array(),
              'save_queries' => TRUE
          );
        mode: '0644'
      when: customer_type in ['test', 'VIP', 'regular']
      changed_when: false
      become: true

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ اجرای داکر کامپوزر و میگریشن ها

    # SMD : قبل از اجرای داکر کامپز یک بکاپ از همه پایگاه داده های ان مشتری بگیرد

    # SMD : چک کند اگر شبکه نباشد درست کند

    # ساخت شبکه مخصوص به هر مشتری
    - name: Create Docker network for each customer
      community.docker.docker_network:
        name: "{{ customer_network_names[inventory_hostname] }}"
        state: present
      when: customer_type in ["test", "VIP", "regular"]

    # SMD : اگر کامپوز ها اپ باشد این اجرا بشود : قبل از اجرای داکر کامپوز docker compose -o inventory_hostname down

    # اجرای داکر کامپوز کالیبری برای هر مشتری
    - name: Run Docker Compose for calibri project
      ansible.builtin.command:
        cmd: "docker compose -p {{ inventory_hostname }} -f {{ project_path }}/{{ inventory_hostname }}/docker-compose-calibri.yml.j2 up -d"
      when: customer_type in ["test", "VIP", "regular"]
      changed_when: false

    # اجرای داکر کامپوز کالیبری برای هر مشتری
    - name: Run Docker Compose for portal project
      ansible.builtin.command:
        cmd: "docker compose -p {{ inventory_hostname }} -f {{ project_path }}/{{ inventory_hostname }}/docker-compose-portal.yml.j2 up -d"
      when: customer_type in ["test", "VIP", "regular"]
      changed_when: false

    # اجرای داکر کامپوز پرتال برای هر مشتری
    - name: Run Docker Compose for portal frontend project
      ansible.builtin.command:
        cmd: "docker compose -p {{ inventory_hostname }} -f {{ project_path }}/{{ inventory_hostname }}/docker-compose-portal-frontend.yml.j2 up -d"
      when: customer_type in ["test", "VIP", "regular"]
      changed_when: false

    # یافتن پوشه های ولوم از فایل داکر کامپوز
    - name: Extract volume names from docker-compose.yml
      ansible.builtin.shell: |
        set -o pipefail
        volumes=$(grep -oP '^\s*-\s*(\S+):' {{ project_path }}/docker-compose.yml | sed 's/^- //')
        echo "$volumes" > "{{ info_path }}/volumes/{{ inventory_hostname }}.txt"
      register: volumes_result
      when: customer_type in ["test", "VIP", "regular"]
      changed_when: false

    # اعطای دسترسی به پوشه‌های ولوم بر اساس فایل ولوم‌های هر مشتری
    - name: Grant write permissions to Docker volume directories on the host
      ansible.builtin.file:
        path: "/var/lib/docker/volumes/{{ item }}/_data"
        state: directory
        mode: '0777'
      loop: "{{ lookup('file', '{{ info_path }}/volumes/{{ inventory_hostname }}.txt').splitlines() }}"
      become: true
      when: customer_type in ["test", "VIP", "regular"]

    # SMD : میگریشن در کانتینر پرتال و نصب کامپوزر
    # docker exec -it {{ container_name }}-portal bash
    # composer install
    # php bin/console doctrine:migration:migrate

    # اعطای دسترسی نوشتن به پوشه‌ها در کانتینر کالیبری
    - name: Grant write permissions to folders in the container
      community.docker.docker_container:
        name: "{{ container_name }}-gateway"
        command: "chmod -R 777 uploads captcha_images"
        state: started
      when: customer_type in ["test", "VIP", "regular"]

    # میگریشن در کانتینر کالیبری
    - name: Migration for calibri
      community.docker.docker_container:
        name: "{{ container_name }}-gateway"
        command: "php index.php migrate index false"
        state: started
      when: customer_type in ["test", "VIP", "regular"]

    # یافتن پایگاه داده‌ها برای هر مشتری و ذخیره در یک فایل متنی
    - name: Extract database information for each customer
      ansible.builtin.shell: |
        # استخراج اطلاعات پایگاه داده‌ها از تنظیمات جدید Ansible
        DB_TYPE="{{ portal_database_type }}"
        DB_NAME="{{ portal_mysql_db_name }}"
        DB_USER="{{ portal_mysql_user }}"
        DB_PASSWORD="{{ portal_mysql_password }}"
        DB_HOST="localhost"
        echo "$DB_TYPE,$DB_NAME,$DB_USER,$DB_PASSWORD,$DB_HOST" >> "{{ info_path }}/databases/{{ inventory_hostname }}.txt"

        DB_TYPE="{{ gateway_database_type }}"
        DB_NAME="{{ gateway_mysql_db_name }}"
        DB_USER="{{ gateway_mysql_user }}"
        DB_PASSWORD="{{ gateway_mysql_password }}"
        DB_HOST="localhost"
        echo "$DB_TYPE,$DB_NAME,$DB_USER,$DB_PASSWORD,$DB_HOST" >> "{{ info_path }}/databases/{{ inventory_hostname }}.txt"
      register: db_info_result
      when: customer_type in ["test", "VIP", "regular"]
      changed_when: false

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ تست ها
    # اجرای تست‌های یکپارچگی، مهاجرت، استفاده‌پذیری، بار و پایگاه داده برای همه مشتریان
    - name: Run integration, migration, usability, load, and database tests for all customers
      ansible.builtin.shell: |
        cd "{{ project_path }}/test" && \
        python3 integration_test.py && \     # تست‌های یکپارچگی برای بررسی تعامل بخش‌های مختلف سیستم
        python3 migration_test.py && \       # تست‌های مهاجرت برای بررسی صحت فرآیند انتقال داده‌ها
        python3 usability_test.py && \       # تست‌های استفاده‌پذیری برای ارزیابی تجربه کاربری
        python3 load_test.py && \            # تست‌های بار برای بررسی رفتار سیستم تحت بار زیاد
        python3 database_test.py             # تست‌های پایگاه داده برای بررسی صحت داده‌ها و عملیات پایگاه داده
      when: customer_type in ["test", "VIP", "regular"]
      changed_when: true                     # به منظور شناسایی تغییر در هر بار اجرای این تسک

    # اجرای تست‌های CI/CD برای مشتریان تست
    - name: Run additional tests for customer test
      ansible.builtin.shell: |
        cd "{{ project_path }}/test"
        python3 api_test.py                # تست‌هایی برای بررسی عملکرد و صحت API‌ها
        python3 performance_test.py        # تست‌های عملکردی برای ارزیابی سرعت و پاسخ‌دهی سیستم
        python3 security_test.py           # تست‌های امنیتی برای شناسایی آسیب‌پذیری‌ها و تهدیدات
        python3 smoke_test.py              # تست‌های دود برای اطمینان از اینکه سیستم به درستی راه‌اندازی شده است
        python3 acceptance_test.py         # تست‌های پذیرش برای بررسی اینکه سیستم نیازهای کاربر را برآورده می‌کند
        python3 reliability_test.py        # تست‌های قابلیت اطمینان برای ارزیابی پایداری و عملکرد سیستم
        python3 stress_test.py             # تست‌های استرس برای بررسی عملکرد سیستم تحت بارهای شدید
        python3 ui_test.py                 # تست‌های رابط کاربری برای بررسی تعامل کاربر با سیستم
        python3 system_test.py             # تست‌های سیستم برای ارزیابی یکپارچگی کل سیستم
        python3 regression_test.py         # تست‌های رگرسیون برای اطمینان از اینکه تغییرات جدید باعث اختلال در عملکردهای قبلی نمی‌شود
      when: customer_type == "test"
      changed_when: true

    # اجرای اسکن SonarQube
    - name: Run SonarQube scan
      ansible.builtin.shell: |
        cd "{{ project_path }}"
        ./gradlew sonarqube \
          -Dsonar.projectKey={{ sonar_project_key }} \
          -Dsonar.projectName="{{ sonar_project_name }}" \
          -Dsonar.host.url={{ sonar_url }} \
          -Dsonar.login={{ sonar_token }}
      when: customer_type == "test"
      changed_when: true

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ بکاپ گرفتن

    # SMD : اگر فایل نباشد کپی بکند

    # کپی کردن اسکریپت بکاپ به سرور
    - name: Copy backup script to the server
      ansible.builtin.copy:
        content: |
          #!/bin/bash

          # مسیر بکاپ
          BACKUP_DIR="{{ backup_path }}/{{ inventory_hostname }}/$(date +'%Y-%m-%d')"
          mkdir -p $BACKUP_DIR  # ایجاد پوشه برای بکاپ

          # فایل گزارش
          BACKUP_LOG="{{ log_path }}/backup/{{ inventory_hostname }}.txt"
          echo "Backup started at $(date)" >> $BACKUP_LOG

          # گرفتن لیست از ولوم‌ها از فایل مخصوص هر مشتری
          VOLUMES=$(cat {{ info_path }}/volumes/{{ inventory_hostname }}.txt)

          # بکاپ از هر ولوم
          for VOLUME in $VOLUMES; do
            docker run --rm -v $VOLUME:/volume -v $BACKUP_DIR:/backup alpine \
              tar czf /backup/$VOLUME.tar.gz -C /volume .  # فشرده‌سازی و ذخیره بکاپ
            echo "Backup for volume $VOLUME completed at $(date)" >> $BACKUP_LOG
          done

          # گرفتن لیست از دیتابیس‌ها از فایل مخصوص هر مشتری
          DATABASES="{{ info_path }}/databases/{{ inventory_hostname }}.txt"

          while IFS=',' read -r DB_TYPE DB_NAME DB_USER DB_PASSWORD DB_HOST; do
            if [[ "$DB_TYPE" == "mysql" ]]; then
              # گرفتن بکاپ از دیتابیس MySQL
              BACKUP_FILE="$BACKUP_DIR/$DB_NAME-mysql.sql.gz"
              echo "Backing up MySQL database $DB_NAME..." >> $BACKUP_LOG
              mysqldump -u $DB_USER -p$DB_PASSWORD -h $DB_HOST $DB_NAME | gzip > $BACKUP_FILE
              echo "Backup for MySQL database $DB_NAME completed at $(date)" >> $BACKUP_LOG

            elif [[ "$DB_TYPE" == "postgresql" ]]; then
              # گرفتن بکاپ از دیتابیس PostgreSQL
              BACKUP_FILE="$BACKUP_DIR/$DB_NAME-postgresql.sql.gz"
              echo "Backing up PostgreSQL database $DB_NAME..." >> $BACKUP_LOG
              pg_dump -U $DB_USER -h $DB_HOST -d $DB_NAME | gzip > $BACKUP_FILE
              echo "Backup for PostgreSQL database $DB_NAME completed at $(date)" >> $BACKUP_LOG
            fi
          done < "$DATABASES"

          # ارسال فایل بکاپ به تلگرام
          TELEGRAM_TOKEN="YOUR_BOT_TOKEN"
          CHAT_ID="YOUR_CHAT_ID"
          BACKUP_FILE_PATH="$BACKUP_DIR/*.tar.gz"
          curl -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendDocument" \
            -F document=@"$BACKUP_FILE_PATH" \
            -F chat_id="$CHAT_ID"

          # ارسال فایل به FTP
          FTP_SERVER="ftp.server.com"
          FTP_USER="ftp_user"
          FTP_PASSWORD="ftp_password"
          curl -T $BACKUP_FILE_PATH ftp://$FTP_SERVER/path/ --user $FTP_USER:$FTP_PASSWORD

          echo "Backup completed at $(date)" >> $BACKUP_LOG

        dest: "{{ backup_path }}/{{ inventory_hostname }}/backup_volumes.sh"
        mode: '0755'  # اعطای دسترسی اجرایی به اسکریپت

    # تنظیم Cron job برای بکاپ
    - name: Set up cron job for backup
      ansible.builtin.cron:
        name: "Backup Docker Volumes and Databases"
        minute: "0"
        hour: "0,8,16"  # اجرای بکاپ سه بار در روز (0:00، 8:00، 16:00)
        job: "/bin/bash {{ backup_path }}/{{ inventory_hostname }}/backup_volumes.sh"
        user: root
        state: present  # این باعث می‌شود فقط اگر کرون جاب وجود نداشته باشد، تعریف شود
